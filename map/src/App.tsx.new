import React, { useState, useEffect } from 'react';
import { GoogleMap, LoadScript, Marker, DirectionsRenderer } from '@react-google-maps/api';
import * as XLSX from 'xlsx';
import './App.css';

interface Therapist {
  name: string;
  address: string;
  lat: number;
  lng: number;
}

const App: React.FC = () => {
  const [therapists, setTherapists] = useState<Therapist[]>([]);
  const [showMarkers, setShowMarkers] = useState(true);
  const [currentLocation, setCurrentLocation] = useState<google.maps.LatLng | null>(null);
  const [destination, setDestination] = useState<string>('');
  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null);
  const [autocomplete, setAutocomplete] = useState<google.maps.places.Autocomplete | null>(null);

  const mapContainerStyle = {
    width: '100%',
    height: '100vh'
  };

  const center = {
    lat: 40.7128,
    lng: -74.0060
  };

  useEffect(() => {
    // Load Excel file
    const loadData = async () => {
      const response = await fetch('/cleaned_dataset_203_with_coordinates.xlsx');
      const arrayBuffer = await response.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const data = XLSX.utils.sheet_to_json(worksheet);
      
      setTherapists(data.map((row: any) => ({
        name: row.name || '',
        address: row.address || '',
        lat: parseFloat(row.lat) || 0,
        lng: parseFloat(row.lng) || 0
      })));
    };

    loadData();
  }, []);

  const onMapLoad = (map: google.maps.Map) => {
    // Get current location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          setCurrentLocation(new google.maps.LatLng(pos.lat, pos.lng));
          map.setCenter(pos);
        },
        (error) => {
          console.error('Error getting location:', error);
        }
      );
    }
  };

  const onDestinationSelect = () => {
    if (autocomplete && currentLocation) {
      const place = autocomplete.getPlace();
      if (place.geometry) {
        const directionsService = new google.maps.DirectionsService();
        directionsService.route(
          {
            origin: currentLocation,
            destination: place.geometry.location!,
            travelMode: google.maps.TravelMode.DRIVING,
          },
          (result, status) => {
            if (status === google.maps.DirectionsStatus.OK) {
              setDirections(result);
            }
          }
        );
      }
    }
  };

  return (
    <div className="app">
      <div className="controls">
        <button onClick={() => setShowMarkers(!showMarkers)}>
          {showMarkers ? 'Hide Markers' : 'Show Markers'}
        </button>
        <input
          type="text"
          placeholder="Enter destination"
          value={destination}
          onChange={(e) => setDestination(e.target.value)}
          onFocus={() => {
            if (!autocomplete) {
              const input = document.getElementById('destination-input') as HTMLInputElement;
              const newAutocomplete = new google.maps.places.Autocomplete(input);
              setAutocomplete(newAutocomplete);
            }
          }}
          id="destination-input"
        />
        <button onClick={onDestinationSelect}>Get Directions</button>
      </div>

      <LoadScript
        googleMapsApiKey="YOUR_GOOGLE_MAPS_API_KEY"
        libraries={['places']}
      >
        <GoogleMap
          mapContainerStyle={mapContainerStyle}
          center={center}
          zoom={12}
          onLoad={onMapLoad}
        >
          {showMarkers && therapists.map((therapist, index) => (
            <Marker
              key={index}
              position={{ lat: therapist.lat, lng: therapist.lng }}
              title={therapist.name}
            />
          ))}
          {currentLocation && (
            <Marker
              position={currentLocation}
              icon={{
                url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
              }}
            />
          )}
          {directions && <DirectionsRenderer directions={directions} />}
        </GoogleMap>
      </LoadScript>
    </div>
  );
};

export default App; 